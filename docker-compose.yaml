version: "3.8"
services:
  # Order Service
  order-service:
    build: ./OrderService
    container_name: "order-service"
    depends_on:
      - order-database-host
      - Merchant-Service-api
      - buyer_container
      - Inventory-Service-api
      - rabbitmq
      - email-service
      - Payment-Service-api
    volumes:
      - ./OrderService/src:/app
    networks:
      - order-network
      - rabbitmq-network

  order-database-host:
    image: postgres
    container_name: "order-database-host"
    environment:
      - POSTGRES_USER=${ORDER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ORDER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${ORDER_POSTGRES_DATABASE}
    volumes:
      - order-database-data:/var/lib/postgresql/data
      - ./OrderService/MigrationScript:/docker-entrypoint-initdb.d/
    networks:
      - order-network
      - rabbitmq-network
  # / Order Service

  # Merchant Service
  merchant-service-api:
    container_name: "Merchant-Service-api"
    build: ./MerchantService
    environment:
      - HOST=0.0.0.0
      - PORT=${MERCHANT_SERVICE_PORT}
      - POSTGRES_HOST=${MERCHANT_SERVICE_POSTGRES_HOST}
      - POSTGRES_USER=${MERCHANT_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${MERCHANT_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${MERCHANT_SERVICE_POSTGRES_DATABASE}
      - ENVIRONMENT=${ENVIRONMENT}

    volumes:
      - ./MerchantService/src:/app/src
    depends_on:
      - Merchant-Service-database
    networks:
      - merchant-network
      - rabbitmq-network

  merchant-service-db:
    container_name: "Merchant-Service-database"
    image: postgres
    environment:
      - POSTGRES_USER=${MERCHANT_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${MERCHANT_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${MERCHANT_SERVICE_POSTGRES_DATABASE}

    volumes:
      - merchant-service-database-data:/var/lib/postgresql/data
      - ./MerchantService/MigrationScript:/docker-entrypoint-initdb.d/

    networks:
      - merchant-network

  # / Merchant Service

  # Buyer Service

  buyer:
    build: ./BuyerService/src
    container_name: "buyer_container"
    depends_on:
      - buyer_db
    volumes:
      - ./BuyerService/src:/app
    networks:
      - buyer-network
      - rabbitmq-network

  buyer_db:
    image: postgres
    container_name: "buyer_db"
    environment:
      - POSTGRES_USER=${BUYER_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${BUYER_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${BUYER_SERVICE_POSTGRES_DB}
    volumes:
      - buyer_db-data:/var/lib/postgresql/data
      - ./BuyerService/migration_scripts:/docker-entrypoint-initdb.d/
    networks:
      - buyer-network

  # / Buyer Service

  # Email Service
  email-service:
    build: ./EmailService
    depends_on:
      - rabbitmq
    volumes:
      - ./EmailService/src:/app
    networks:
      - rabbitmq-network
  # / Email Service

  # Inventory Service

  inventory-service-api:
    container_name: "Inventory-Service-api"
    build: ./InventoryService
    environment:
      - HOST=0.0.0.0
      - PORT=${INVENTORY_SERVICE_PORT}
      - POSTGRES_HOST=${INVENTORY_SERVICE_POSTGRES_HOST}
      - POSTGRES_USER=${INVENTORY_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${INVENTORY_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${INVENTORY_SERVICE_POSTGRES_DATABASE}
      - MERCHANT_SERVICE_HOST=${MERCHANT_SERVICE_HOST}
      - MERCHANT_SERVICE_PORT=${MERCHANT_SERVICE_PORT}
      - RABBITMQ_SERVER_HOST=${RABBITMQ_SERVER_HOST}
      - ENVIRONMENT=${ENVIRONMENT}

    volumes:
      - ./InventoryService/src:/app/src
    depends_on:
      - Inventory-Service-database
      - rabbitmq
    networks:
      - rabbitmq-network
      - inventory-network

  inventory-service-db:
    container_name: "Inventory-Service-database"
    image: postgres
    environment:
      - POSTGRES_USER=${INVENTORY_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${INVENTORY_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${INVENTORY_SERVICE_POSTGRES_DATABASE}
      - RABBITMQ_SERVER_HOST=${RABBITMQ_SERVER_HOST}

    volumes:
      - inventory-service-database-data:/var/lib/postgresql/data
      - ./InventoryService/MigrationScript:/docker-entrypoint-initdb.d/
    networks:
      - inventory-network

  # / Inventory Service

  rabbitmq:
    image: rabbitmq:3.9.8-management
    container_name: "rabbitmq"
    hostname: rabbitmq
    networks:
      - rabbitmq-network

  payment-service-api:
    container_name: "Payment-Service-api"
    build: ./PaymentService
    environment:
      - POSTGRES_HOST=${PAYMENT_SERVICE_POSTGRES_HOST}
      - POSTGRES_USER=${PAYMENT_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PAYMENT_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${PAYMENT_SERVICE_POSTGRES_DATABASE}
      - RABBITMQ_SERVER_HOST=${RABBITMQ_SERVER_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./PaymentService/src:/app/src
    depends_on:
      - Payment-Service-database
      - rabbitmq
    networks:
      - rabbitmq-network
      - payment-service-network

  payment-service-db:
    container_name: "Payment-Service-database"
    image: postgres
    environment:
      - POSTGRES_USER=${PAYMENT_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PAYMENT_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${PAYMENT_SERVICE_POSTGRES_DATABASE}
    networks:
      - payment-service-network
    volumes:
      - payment-service-database-data:/var/lib/postgresql/data
      - ./PaymentService/MigrationScript:/docker-entrypoint-initdb.d/

  api-layer:
    container_name: "API-Layer"
    build: ./ApiLayer
    environment:
      - HOST=${API_SERVICE_HOST}
      - PORT=${API_SERVICE_PORT}
      - ORDER_SERVICE_HOST=${ORDER_SERVICE_HOST}
      - ORDER_SERVICE_PORT=${ORDER_SERVICE_PORT}
      - MERCHANT_SERVICE_HOST=${MERCHANT_SERVICE_HOST}
      - MERCHANT_SERVICE_PORT=${MERCHANT_SERVICE_PORT}
      - BUYER_SERVICE_HOST=${BUYER_SERVICE_HOST}
      - BUYER_SERVICE_PORT=${BUYER_SERVICE_PORT}
      - INVENTORY_SERVICE_HOST=${INVENTORY_SERVICE_HOST}
      - INVENTORY_SERVICE_PORT=${INVENTORY_SERVICE_PORT}
      - ENVIRONMENT=${ENVIRONMENT}

    ports:
      - "${API_SERVICE_PORT}:${API_SERVICE_PORT}"
    volumes:
      - ./ApiLayer/src:/app/src
    depends_on:
      - order-service
      - Inventory-Service-api
      - buyer_container
      - Merchant-Service-api
    networks:
      - inventory-network
      - order-network
      - buyer-network
      - merchant-network

volumes:
  order-database-data:
  merchant-service-database-data:
  inventory-service-database-data:
  payment-service-database-data:
  buyer_db-data:

networks:
  order-network:
    driver: bridge

  buyer-network:
    driver: bridge

  merchant-network:
    driver: bridge

  inventory-network:
    driver: bridge

  rabbitmq-network:
    driver: bridge

  payment-service-network:
    driver: bridge
